[project]
name = "transcribo-backend"
dynamic = ["version"]
description = "The backend of the transcribo app"
authors = [{name = "Data Competence Center Basel-Stadt", email = "dcc@bs.ch" },{ name = "Tobias Bollinger", email = "tobias.bollinger@gmail.com" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.12,<4.0"
license = "MIT"
license-files = ["LICEN[CS]E*"]
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "aiohttp>=3.11.13",
    "fastapi[standard]>=0.115.8",
    "pydub>=0.25.1",
    "structlog>=25.1.0",
    "version-pioneer>=0.0.13",
    "audioop-lts; python_version >= '3.13'",
    "openai>=1.97.1",
]

[project.urls]
Homepage = "https://DCC-BS.github.io/transcribo-backend/"
Repository = "https://github.com/DCC-BS/transcribo-backend"
Documentation = "https://DCC-BS.github.io/transcribo-backend/"

[dependency-groups]
dev = [
    "coverage>=7.6.12",
    "pytest>=8.3.4",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    "deptry>=0.22.0",
    "basedpyright>=1.27.1",
    "pytest-cov>=6.0.0",
    "ruff>=0.9.2",
    "mkdocs>=1.4.2",
    "mkdocs-material>=8.5.10",
    "mkdocstrings[python]>=0.26.1",
    "mypy>=1.15.0",
]

[build-system]
requires = ["hatchling","version-pioneer>=0.0.13"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "version-pioneer"

[tool.version-pioneer]
versionscript = "src/transcribo_backend/_version.py"  # Where to "read" the Version-Pioneer script (to execute `get_version_dict()`).
versionfile-sdist = "src/transcribo_backend/_version.py"  # Where to "write" the version dict for sdist.
versionfile-wheel = "src/transcribo_backend/_version.py"  # Where to "write" the version dict for wheel.

[tool.basedpyright]
include = [
    "src"
]
exclude = [
    "**/__pycache__",
    "**/.venv",
    "**/.*"
]
defineConstant = { DEBUG = true }
pythonVersion = "3.12"
stubPath = "src/transcribo_backend/stubs"
reportExplicitAny = false


[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py312"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.format]
preview = true
indent-style = "space"
quote-style = "double"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
# Group imports by type (standard library, third-party, first-party).
combine-as-imports = true
force-wrap-aliases = true

[tool.coverage.run]
branch = true
source = [ "src" ]

[tool.coverage.report]
omit = [
    "*/tests/*",
    "*/.venv/*"
]
skip_empty = true
exclude_lines = [
    "raise NotImplementedError",
    "raise NotImplemented",
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]
exclude_also = [
    "@(abc\\. )?abstractmethod",
    "@(abc\\. )?abstractproperty"
]
